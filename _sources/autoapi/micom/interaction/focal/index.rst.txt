micom.interaction.focal
=======================

.. py:module:: micom.interaction.focal

.. autoapi-nested-parse::

   Quantify metabolic interactions between taxa.



Attributes
----------

.. autoapisummary::

   micom.interaction.focal.GrowthResults


Functions
---------

.. autoapisummary::

   micom.interaction.focal.workflow
   micom.interaction.focal._metabolite_interaction
   micom.interaction.focal.sample_interactions
   micom.interaction.focal._interact
   micom.interaction.focal.interactions


Module Contents
---------------

.. py:data:: GrowthResults

.. py:function:: workflow(func, args, threads=4, description=None, progress=True)

   Run analyses for several samples in parallel.

   This will analyze several samples in parallel. Includes a workaround for
   optlang memory leak.

   :param func: A function that takes a single argument (can be any object) and
                that performs your analysis for a single sample.
   :type func: function
   :param args: An array-like object (list, tuple, numpy array, pandas Series, etc.)
                that contains the arguments for each sample.
   :type args: array-like object
   :param threads: How many samples to analyze in parallel at once.
   :type threads: positive int
   :param description: The dewscription shown in front of the progress bar.
   :type description: str
   :param progress: Whether to show a progress bar.
   :type progress: bool


.. py:function:: _metabolite_interaction(fluxes: pandas.DataFrame, taxon: str, partner: str) -> pandas.DataFrame

   Checks if and how taxa interact.


.. py:function:: sample_interactions(fluxes: pandas.DataFrame, sample_id: str, taxon: str) -> pandas.DataFrame

   Quantify interactions in a single sammple.

   :param fluxes: A table of exchange fluxes.
   :type fluxes: pandas.DataFrame
   :param sample_id: The sample id to use.
   :type sample_id: str
   :param taxon: The focal taxon to use.
   :type taxon: str

   :returns: The mapped interactions between the focal taxon and all other taxa.
   :rtype: pandas.DataFrame


.. py:function:: _interact(args: List) -> pandas.DataFrame

   Quantify interactions of a focal taxon with other taxa.


.. py:function:: interactions(results: micom.workflows.GrowthResults, taxa: Union[None, str, List[str]], threads: int = 1, progress: bool = True) -> pandas.DataFrame

   Quantify interactions of a focal/reference taxon with other taxa.

   :param results: The growth results to use.
   :type results: GrowthResults
   :param taxa: The focal taxa to use. Can be a single taxon, a list of taxa or None in which
                case all taxa are considered.
   :type taxa: str, list of str, or None

   :returns: The mapped interactions between the focal taxon and all other taxa.
   :rtype: pandas.DataFrame


