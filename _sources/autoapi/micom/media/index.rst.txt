micom.media
===========

.. py:module:: micom.media

.. autoapi-nested-parse::

   Manages functions for growth media analysis and manipulation.



Attributes
----------

.. autoapisummary::

   micom.media.logger


Classes
-------

.. autoapisummary::

   micom.media.Community


Functions
---------

.. autoapisummary::

   micom.media._format_min_growth
   micom.media._apply_min_growth
   micom.media.check_modification
   micom.media.add_linear_obj
   micom.media.add_mip_obj
   micom.media.safe_weight
   micom.media.weight
   micom.media.minimal_medium
   micom.media.complete_medium


Module Contents
---------------

.. py:class:: Community(taxonomy, model_db=None, id=None, name=None, rel_threshold=1e-06, solver=None, progress=True, max_exchange=100, mass=1)

   Bases: :py:obj:`cobra.Model`


   A community of models.

   This class represents a community of individual models. It was designed for
   microbial communities but may also be used for multi-tissue or tissue-cell
   mixture models as long as all individuals exist within a single enclosing
   compartment.


   .. py:method:: __add_exchanges(reactions, info, external_compartment='e', internal_exchange=1000)

      Add exchange reactions for a new model.



   .. py:method:: __update_exchanges()

      Update exchanges.



   .. py:method:: __update_community_objective()

      Update the community objective.



   .. py:method:: optimize_single(id)

      Optimize growth rate for one individual.

      `optimize_single` will calculate the maximal growth rate for one
      individual member of the community.

      .. rubric:: Notes

      This might well mean that growth rates for all other individuals are
      low since the individual may use up all available resources.

      :param id: The ID of the individual to be optimized.
      :type id: str
      :param fluxes: Whether to return all fluxes. Defaults to just returning the
                     maximal growth rate.
      :type fluxes: boolean, optional

      :returns: The maximal growth rate for the given taxa.
      :rtype: float



   .. py:method:: optimize_all(progress=False)

      Return solutions for individually optimizing each model.

      .. rubric:: Notes

      This might well mean that growth rates for all other individuals are
      low since the individual may use up all available resources. As a
      consequence the reported growth rates may usually never be obtained
      all at once.

      :param progress: Whether to show a progress bar.
      :type progress: boolean, optional

      :returns: The maximal growth rate for each taxa.
      :rtype: pandas.Series



   .. py:method:: optimize(fluxes=False, pfba=False, raise_error=False, atol=None, rtol=None)

      Optimize the model using flux balance analysis.

      This is the primary accessor for optimization in MICOM and should be used
      for all optimizations. Different from cobrapy this will *not* return the full
      solution by default but only growth rates which is much quicker. You can
      request a full solution by setting the `fluxes` and `pFBA` arguments.

      :param slim: Whether to return a slim solution which does not contain fluxes,
                   just growth rates.
      :type slim: boolean, optional
      :param raise_error: Should an error be raised if the solution is not optimal. Defaults
                          to False which will either return a solution with a non-optimal
                          status or None if optimization fails.
      :type raise_error: boolean, optional
      :param fluxes: Whether to return the fluxes as well.
      :type fluxes: boolean, optional
      :param pfba: Whether to obtain fluxes by parsimonious FBA rather than
                   "classical" FBA. This is highly recommended.
      :type pfba: boolean, optional
      :param atol: Absolute tolerance for the growth rates. If None will use the solver
                   tolerance.
      :type atol: float
      :param rtol: Relative tolerqance for the growth rates. If None will use the
                   solver tolerance.
      :type rtol: float

      :returns: The solution after optimization or None if there is no optimum.
      :rtype: micom.CommunitySolution



   .. py:property:: abundances
      The normalized abundances.

      Setting this attribute will also trigger the appropriate updates in
      the exchange fluxes and the community objective.

      :type: pandas.Series


   .. py:method:: set_abundance(value, normalize=True)

      Change abundances for one or more taxa.

      :param value: The new abundances. Must contain one value for each taxon. Can
                    be a named object like a pandas Series.
      :type value: array-like object
      :param normalize: Whether to normalize the abundances to a total of 1.0. Many things
                        in micom asssume that this is always the case. Only change this
                        if you know what you are doing :O
      :type normalize: boolean, optional



   .. py:property:: taxonomy
      The taxonomy used within the model.

      This attribute only returns a copy.

      :type: pandas.DataFrame


   .. py:property:: modification
      Denotes modifications to the model currently applied.

      Will be None if the community is unmodified.

      :type: str


   .. py:property:: exchanges
      Return all exchange reactions in the model.

      Uses several heuristics based on the reaction name and compartments
      to exclude reactions that are *not* exchange reactions.

      :type: list


   .. py:property:: internal_exchanges
      Return all internal exchanges.

      Internal exchanges are exchanges between individual taxa and the medium.

      :type: list


   .. py:property:: medium
      Return the medium.


   .. py:property:: build_metrics
      Returns general metrics for database matching.

      Only available when built using a model database.

      :type: pd.Series


   .. py:method:: optcom(strategy='lagrangian', min_growth=0.0, fluxes=False, pfba=True)

      Run OptCom for the community.

      OptCom methods are a group of optimization procedures to find community
      solutions that provide a tradeoff between the cooperative community
      growth and the egoistic growth of each individual [#c1]_. `micom`
      provides several strategies that can be used to find optimal solutions:

      - "moma": Minimization of metabolic adjustment. Simultaneously
        optimizes the community objective (maximize) and the cooperativity
        cost (minimize). This method finds an exact maximum but doubles the
        number of required variables, thus being slow.
      - "lmoma": The same as "moma" only with a linear
        representation of the cooperativity cost (absolute value).
      - "original": Solves the multi-objective problem described in [#c1]_.
        Here, the community growth rate is maximized simultanously with all
        individual growth rates. Note that there are usually many
        Pareto-optimal solutions to this problem and the method will only
        give one solution. This is also the slowest method.

      :param community: The community to optimize.
      :type community: micom.Community
      :param strategy: The strategy used to solve the OptCom formulation. Defaults to
                       "lagrangian" which gives a decent tradeoff between speed and
                       correctness.
      :type strategy: str
      :param min_growth: The minimal growth rate required for each individual. May be a
                         single value or an array-like object with the same length as there
                         are individuals.
      :type min_growth: float or array-like
      :param fluxes: Whether to return the fluxes as well.
      :type fluxes: boolean
      :param pfba: Whether to obtain fluxes by parsimonious FBA rather than
                   "classical" FBA.
      :type pfba: boolean

      :returns: The solution of the optimization. If fluxes==False will only
                contain the objective value, community growth rate and individual
                growth rates.
      :rtype: micom.CommunitySolution

      .. rubric:: References

      .. [#c1] OptCom: a multi-level optimization framework for the metabolic
         modeling and analysis of microbial communities.
         Zomorrodi AR, Maranas CD. PLoS Comput Biol. 2012 Feb;8(2):e1002363.
         doi: 10.1371/journal.pcbi.1002363, PMID: 22319433



   .. py:method:: cooperative_tradeoff(min_growth=0.0, fraction=1.0, fluxes=False, pfba=False, atol=None, rtol=None)

      Find the best tradeoff between community and individual growth.

      Finds the set of growth rates which maintian a particular community
      growth and spread up growth across all taxa as much as possible.
      This is done by minimizing the L2 norm of the growth rates with a
      minimal community growth.

      :param min_growth: The minimal growth rate required for each individual. May be a
                         single value or an array-like object with the same length as there
                         are individuals.
      :type min_growth: float or array-like, optional
      :param fraction: The minum percentage of the community growth rate that has to be
                       maintained. For instance 0.9 means maintain 90% of the maximal
                       community growth rate. Defaults to 100%.
      :type fraction: float or list of floats in [0, 1]
      :param fluxes: Whether to return the fluxes as well.
      :type fluxes: boolean, optional
      :param pfba: Whether to obtain fluxes by parsimonious FBA rather than
                   "classical" FBA. This is highly recommended.
      :type pfba: boolean, optional
      :param atol: Absolute tolerance for the growth rates. If None will use the solver
                   tolerance.
      :type atol: float
      :param rtol: Relative tolerqance for the growth rates. If None will use the
                   solver tolerance.
      :type rtol: float

      :returns: The solution of the optimization. If fluxes==False will only
                contain the objective value, community growth rate and individual
                growth rates. If more than one fraction value is given will return
                a pandas Series of solutions with the fractions as indices.
      :rtype: micom.CommunitySolution or pd.Series of solutions



   .. py:method:: knockout_taxa(taxa=None, fraction=1.0, method='change', progress=True, diag=True)

      Sequentially knowckout a list of taxa in the model.

      This uses cooperative tradeoff as optimization criterion in order to
      get unqiue solutions for individual growth rates. Requires a QP
      solver to work.

      :param taxa: Names of taxa to be knocked out.
      :type taxa: str or list of strs
      :param fraction: Percentage of the maximum community growth rate that has to be
                       maintained. Defaults to 100%.
      :type fraction: float in [0, 1], optional
      :param method: One of "raw", "change" or "relative change" that dictates whether
                     to return the new growth rate (raw), the change in growth rate
                     new - old or the relative change ([new - old] / old).
      :type method: str, optional
      :param progress: Whether to show a progress bar. On by default.
      :type progress: bool, optional
      :param diag: Whether the diagonal should contain values as well. If False will
                   be filled with NaNs.
      :type diag: bool, optional

      :returns: A data frame with one row for each knockout and growth rates in the
                columns. Here the row name indicates which taxon has been knocked
                out and the columns contain the growth changes for all taxa in
                that knockout.
      :rtype: pandas.DataFrame



   .. py:property:: scale
      Get a scale to improve numerical properties.


   .. py:method:: to_pickle(filename)

      Save a community in serialized form.

      :param filename: Where to save the pickled community.
      :type filename: str

      :rtype: Nothing



.. py:function:: _format_min_growth(min_growth, taxa)

   Format min_growth into a pandas series.

   :param min_growth: The minimum growth rate for each individual in the community. Either
                      a single value applied to all individuals or one value for each.
   :type min_growth: positive float or array-like object.
   :param taxa: The ID for each individual model in the community.
   :type taxa: array-like

   :returns: A pandas Series mapping each individual to its minimum growth rate.
   :rtype: pandas.Series


.. py:function:: _apply_min_growth(community, min_growth, atol=1e-06, rtol=1e-06)

   Set minimum growth constraints on a model.

   Will integrate with the context.


.. py:function:: check_modification(community)

   Check whether a community already carries a modification.

   :param community: The community class to check.
   :type community: micom.Community

   :raises ValueError: If the community already carries a modification and adding another
       would not be safe.


.. py:data:: logger

.. py:function:: add_linear_obj(community, exchanges, weights)

   Add a linear version of a minimal medium to the community.

   Changes the optimization objective to finding the growth medium requiring
   the smallest total import flux::

       minimize sum w_i|r_i| for r_i in import_reactions

   :param community: The community to modify.
   :type community: micom.Community
   :param exchanges: The reactions to constrain.
   :type exchanges: list of cobra.Reaction
   :param weights: Maps each exchange reaction to a weight that is used in the
                   minimization.
   :type weights: dict


.. py:function:: add_mip_obj(community, exchanges)

   Add a mixed-integer version of a minimal medium to the community.

   Changes the optimization objective to finding the medium with the least
   components::

       minimize size(R) where R part of import_reactions

   :param community: The community to modify.
   :type community: micom.Community
   :param exchanges: The reactions to constrain.
   :type exchanges: list of cobra.Reaction


.. py:function:: safe_weight(met)

   Get the weight of a molecule.


.. py:function:: weight(exchanges, what)

   Obtain elemental weights for metabolites.


.. py:function:: minimal_medium(community, community_growth, min_growth=0.0, exports=False, exchanges=None, minimize_components=False, open_exchanges=False, solution=False, weights=None, atol=None, rtol=None)

   Find the minimal growth medium for the community.

   Finds the minimal growth medium for the community which allows for
   community as well as individual growth. Here, a minimal medium can either
   be the medium requiring the smallest total import flux or the medium
   requiring the least components (ergo ingredients).

   :param community: The community to modify.
   :type community: micom.Community
   :param community_growth: The minimum community-wide growth rate.
   :type community_growth: positive float
   :param min_growth: The minimum growth rate for each individual in the community. Either
                      a single value applied to all individuals or one value for each.
   :type min_growth: positive float or array-like object.
   :param exports: Whether to include export fluxes in the returned medium. Defaults to
                   False which will only return import fluxes.
   :type exports: boolean
   :param exchanges: The list of exchange reactions that are penalized.
   :type exchanges: list of cobra.Reactions
   :param minimize_components: Whether to minimize the number of components instead of the total
                               import flux. Might be more intuitive if set to True but may also be
                               slow to calculate for large communities.
   :type minimize_components: boolean
   :param open_exchanges: Whether to ignore currently set bounds and make all exchange reactions
                          in the model possible. If set to a number all exchange reactions will
                          be opened with (-number, number) as bounds.
   :type open_exchanges: boolean or number
   :param solution: Whether to also return the entire solution and all fluxes for the
                    minimal medium.
   :type solution: boolean
   :param weights: Will scale the fluxes by a weight factor. Can either be "mass" which will
                   scale by molecular mass, a single element which will scale by
                   the elemental content (for instance "C" to scale by carbon content).
                   If None every metabolite will receive the same weight.
                   Will be ignored if `minimize_components` is True.
   :type weights: str
   :param atol: Absolute tolerance for the growth rates. If None will use the solver tolerance.
   :type atol: float
   :param rtol: Relative tolerqance for the growth rates. If None will use the solver tolerance.
   :type rtol: float

   :returns: A series {rid: flux} giving the import flux for each required import
             reaction. If `solution` is True retuns a dictionary
             {"medium": panas.Series, "solution": micom.CommunitySolution}.
   :rtype: pandas.Series or dict


.. py:function:: complete_medium(model, medium, growth=0.1, min_growth=0.001, max_import=1, minimize_components=False, weights=None, strict=[])

   Fill in missing components in a growth medium.

   Finds the minimal number of additions to make a model form biomass. In
   order to avoid bias all added reactions will have a maximum import
   rate of `max_import`.

   .. note::

      This function fixes the growth medium for a single cobra Model. We also
      provide a function `fix_medium` in `micom.workflows` that fixes a growth
      medium for an entire model database.

   :param model: The model to use.
   :type model: cobra.Model
   :param medium: A growth medium. Must contain positive floats as elements and
                  exchange reaction ids as index. Note that reactions not present in the
                  model will be removed from the growth medium.
   :type medium: pandas.Series
   :param growth: The minimum overall growth rate that has to be achieved. For single COBRA
                  model this is just the biomass flux and for community models this is the
                  community biomass flux.
   :type growth: positive float
   :param min_growth: The minimum growth rate for each individual in the community. Either
                      a single value applied to all individuals or one value for each. Only used
                      if model is a `micom.Community` model.
   :type min_growth: positive float or array-like object.
   :param minimize_components: Whether to minimize the number of components instead of the total
                               import flux. Might be more intuitive if set to True but may also be
                               slow to calculate for large communities.
   :type minimize_components: boolean
   :param max_import: The import rate applied for the added exchanges.
   :type max_import: positive float
   :param weights: Will scale the fluxes by a weight factor. Can either be "mass" which will
                   scale by molecular mass, a single element which will scale by
                   the elemental content (for instance "C" to scale by carbon content).
                   If None every metabolite will receive the same weight.
                   Will be ignored if `minimize_components` is True.
   :type weights: str
   :param strict: strict : list
                  Whether to match the imports in the predefined medium exactly. For reactions IDs
                  listed here will not allow additional import of the components in the provided
                  medium. For example, if your input medium has a flux of 10 mmol/(gDW*h) defined
                  and the requested growth rate can only be fulfilled by ramping this up that
                  would be allowed in non-strict mode but forbidden in strict mode. To match all
                  medium components to strict mode use `strict=medium.index`.
   :type strict: list

   :returns: A series {rid: flux} giving the import flux for each required import
             reaction. This will include the initial `medium` as passed to the
             function as well as a minimal set of additional changes such that the
             model produces biomass with a rate >= `min_growth`.
   :rtype: pandas.Series or dict


