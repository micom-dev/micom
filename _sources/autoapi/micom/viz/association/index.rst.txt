micom.viz.association
=====================

.. py:module:: micom.viz.association

.. autoapi-nested-parse::

   Visualization for phenotype prediction.



Attributes
----------

.. autoapisummary::

   micom.viz.association.logger
   micom.viz.association.PANDAS_VERSION


Classes
-------

.. autoapisummary::

   micom.viz.association.Visualization


Functions
---------

.. autoapisummary::

   micom.viz.association.production_rates
   micom.viz.association.consumption_rates
   micom.viz.association.plot_association


Module Contents
---------------

.. py:class:: Visualization(filename, data, template)

   Bases: :py:obj:`object`


   A visualization object.

   .. attribute:: filename

      The filename of trhe saved visualization.

      :type: str

   .. attribute:: data

      The data used to create the Visualization.

      :type: dict

   .. attribute:: template

      The jinja template used to render the visualization.

      :type: jinja2.Template


   .. py:method:: view()

      Open the visualization in a browser.

      :param None.:

      :rtype: nothing



   .. py:method:: save(**kwargs)

      Render and and save the visualization.



.. py:data:: logger

.. py:function:: production_rates(results)

   Calculate the production rates for a set of metabolites.

   .. note::

      Production rates are not net fluxes but the flux of a particular metabolite
      into the external environment independent whether it is taken up by another
      taxon. The net rates can be obtained directly by inspecting the exchange fluxes
      in the "medium" compartment.
      The (transient) production rates reported here are the fluxes other surrounding
      cells/consumers would have access to. Thus, they are often more interesting for
      a phenotype than the net rates which are the excess productin rates, even in the
      absence of another consumer.

   :param results: A growth results as returned by grow.
   :type results: micom.GrowthResults

   :returns: A new flux DataFrame containing the intermediate production rates for each
             metabolite.
   :rtype: pandas.DataFrame


.. py:function:: consumption_rates(results)

   Calculate the production rates for a set of metabolites.

   .. note::

      Consumption rates are not net fluxes but the total consumption of a particular
      metabolite by all taxa in the community independent whether it is secreted again.
      The net rates can be obtained directly by inspecting the exchange fluxes
      in the "medium" compartment.
      The (transient) consumption rates reported here is the total flux of a metabolite
      imported/consumed by taxa in the community.

   :param results: A growth results as returned by grow.
   :type results: micom.GrowthResults

   :returns: A new flux DataFrame containing the intermediate production rates for each
             metabolite.
   :rtype: pandas.DataFrame


.. py:data:: PANDAS_VERSION

.. py:function:: plot_association(results, phenotype, variable_type='binary', variable_name='phenotype', filename='association_%s.html' % datetime.now().strftime('%Y%m%d'), flux_type='production', fdr_threshold=0.05, threads=1, atol=1e-06)

   Test for differential metabolite production.

   This will check for associations of the `phenotype` with metabolite fluxes. Individual
   tests are performed using non-parametric tests of the overall consumption or production
   fluxes for each samples versus the phenotype.

   To assess the the global association, this will fit L1-regularized linear models
   with log-fluxes as features. Will use LASSO regression for a continuous
   response and L1-regularized Logistic regression for a binary response.

   :param results: The results returned by the `grow` workflow.
   :type results: micom.workflows.GrowthResults
   :param phenotype: The data to be fitted. Its index must correspond to `sample_id` in
                     `exchanges`.
   :type phenotype: pandas.Series
   :param variable_type: The type of the variable.
   :type variable_type: str of ["binary", "continuous"]
   :param variable_name: A short description of the phenotype for instance "disease status".
   :type variable_name: str
   :param filename: The HTML file where the visualization will be saved.
   :type filename: str
   :param flux_type: Whether to fit using import or production fluxes.
   :type flux_type: str of ["import", "production"]
   :param threads: The number of threads to use.
   :type threads: int
   :param fdr_threshold: The false discovery rate cutoff to use (FDR-corrected p-value cutoff). Defaults
                         to 0.05.
   :type fdr_threshold: float
   :param atol: Tolerance to consider a flux different from zero. Will default
                to the solver tolerance.
   :type atol: float

   :returns: A MICOM visualization. Can be served with `viz.view`.
   :rtype: Visualization


