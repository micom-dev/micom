:mod:`micom.viz`
================

.. py:module:: micom.viz

.. autoapi-nested-parse::

   Init file for MICOM Visualization.



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   core/index.rst
   exchanges/index.rst
   growth/index.rst
   prediction/index.rst
   tradeoff/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   micom.viz.Visualization



Functions
~~~~~~~~~

.. autoapisummary::

   micom.viz.plot_exchanges_per_sample
   micom.viz.plot_exchanges_per_taxon
   micom.viz.plot_growth
   micom.viz.plot_tradeoff


.. class:: Visualization(filename, data, template)


   Bases: :class:`object`

   A visualization object.

   .. attribute:: filename

      The filename of trhe saved visualization.

      :type: str

   .. attribute:: data

      The data used to create the Visualization.

      :type: dict

   .. attribute:: template

      The jinja template used to render the visualization.

      :type: jinja2.Template

   .. method:: view(self)

      Open the visualization in a browser.

      :param None.:

      :returns:
      :rtype: nothing


   .. method:: save(self, **kwargs)

      Render and and save the visualization.



.. function:: plot_exchanges_per_sample(results, filename='sample_exchanges_%s.html' % datetime.now().strftime('%Y%m%d'), direction='import', cluster=True) -> None

   Plot the per sample exchange fluxes.

   :param results: The results returned by the `grow` workflow.
   :type results: micom.workflows.GrowthResults
   :param filename: The HTML file where the visualization will be saved.
   :type filename: str
   :param direction: The direction of fluxes to plot.
   :type direction: str either "import" or "export"
   :param cluster: Whether to reorder samples so that samples with similar exchange
                   fluxes are close to another.
   :type cluster: bool

   :returns: A MICOM visualization. Can be served with `viz.serve`.
   :rtype: Visualization


.. function:: plot_exchanges_per_taxon(results, filename='taxon_exchanges_%s.html' % datetime.now().strftime('%Y%m%d'), direction='import', **tsne_args) -> None

   Plot the exchange fluxes per taxon.

   :param results: The exchanges returned by the `grow` workflow.
   :type results: micom.workflows.GrowthResults
   :param filename: The HTML file where the visualization will be saved.
   :type filename: str
   :param direction: The direction of fluxes to plot.
   :type direction: str either "import" or "export"
   :param tsne_args: Additional arguments passed to TSNE.
   :type tsne_args: dict

   :returns: A MICOM visualization. Can be served with `viz.serve`.
   :rtype: Visualization


.. function:: plot_growth(results, filename='growth_rates_%s.html' % datetime.now().strftime('%Y%m%d'), tolerance=1e-06)

   Plot the taxa growth rates.

   :param results: The results returned by the `grow` workflow.
   :type results: micom.workflows.GrowthResults
   :param filename: The HTML file where the visualization will be saved.
   :type filename: str
   :param tolerance: Smallest growth rate that will be considered. Everything lower will be
                     considered not growing.
   :type tolerance: float

   :returns: A MICOM visualization. Can be served with `viz.serve`.
   :rtype: Visualization


.. function:: plot_tradeoff(tradeoff_rates, filename='tradeoff_%s.html' % datetime.now().strftime('%Y%m%d'), tolerance=1e-06)

   Plot diagnostics for varying tradeoff values.

   :param tradeoff_rates: The growth rates returned by the `tradeoff` workflow.
   :type tradeoff_rates: pandas.DataFrame
   :param filename: The HTML file where the visualization will be saved.
   :type filename: str
   :param tolerance: Smallest growth rate that will be considered. Everything lower will be
                     considered not growing.
   :type tolerance: float

   :returns: A MICOM visualization. Can be served with `viz.serve`.
   :rtype: Visualization


