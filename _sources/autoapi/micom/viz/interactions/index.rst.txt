micom.viz.interactions
======================

.. py:module:: micom.viz.interactions

.. autoapi-nested-parse::

   Visualizations for interactions.



Attributes
----------

.. autoapisummary::

   micom.viz.interactions.logger
   micom.viz.interactions.GrowthResults
   micom.viz.interactions.UNITS


Classes
-------

.. autoapisummary::

   micom.viz.interactions.Visualization


Functions
---------

.. autoapisummary::

   micom.viz.interactions.interactions
   micom.viz.interactions.summarize_interactions
   micom.viz.interactions.MES
   micom.viz.interactions.plot_focal_interactions
   micom.viz.interactions.plot_mes


Module Contents
---------------

.. py:function:: interactions(results: micom.workflows.GrowthResults, taxa: Union[None, str, List[str]], threads: int = 1, progress: bool = True) -> pandas.DataFrame

   Quantify interactions of a focal/reference taxon with other taxa.

   :param results: The growth results to use.
   :type results: GrowthResults
   :param taxa: The focal taxa to use. Can be a single taxon, a list of taxa or None in which
                case all taxa are considered.
   :type taxa: str, list of str, or None

   :returns: The mapped interactions between the focal taxon and all other taxa.
   :rtype: pandas.DataFrame


.. py:function:: summarize_interactions(ints: pandas.DataFrame) -> pandas.DataFrame

   Summarize interactions to key quantities.

   :param ints: The interactions for individual metabolites calculated before.
   :type ints: pandas.DataFrame

   :returns: The summarized interactions contaning the total flux, mass flux, carbon flux,
             nitrogen flux and number of interactions between any pair of taxa in that
             sample.
   :rtype: pandas.DataFrame


.. py:function:: MES(results: micom.workflows.GrowthResults, cutoff: float = None) -> pandas.DataFrame

   Calculate the Metabolic Exchange Score (MES) for each metabolite.

   MES is the harmonic mean of producers and consumers for a chosen metabolite
   in one sample. High values indicate a large prevalence of cross-feeding for the
   particular metabolite. A value of zero indicates an absence of cross-feeding for
   the particular metabolite.

   :param results: The growth results to use.
   :type results: GrowthResults
   :param cutoff: The smallest flux to consider in the analysis. Will default to the
                  solver tolerance if set to None.
   :type cutoff: float

   :returns: The scores for each metabolite and each sample including metabolite annotations.
   :rtype: pandas.DataFrame

   .. rubric:: References

   .. [1] Marcelino, V.R., et al.
          Disease-specific loss of microbial cross-feeding interactions in the human gut
          Nat Commun 14, 6546 (2023). https://doi.org/10.1038/s41467-023-42112-w


.. py:data:: logger

.. py:data:: GrowthResults

.. py:class:: Visualization(filename, data, template)

   Bases: :py:obj:`object`


   A visualization object.

   .. attribute:: filename

      The filename of trhe saved visualization.

      :type: str

   .. attribute:: data

      The data used to create the Visualization.

      :type: dict

   .. attribute:: template

      The jinja template used to render the visualization.

      :type: jinja2.Template


   .. py:method:: view()

      Open the visualization in a browser.

      :param None.:

      :rtype: nothing



   .. py:method:: save(**kwargs)

      Render and and save the visualization.



.. py:data:: UNITS

.. py:function:: plot_focal_interactions(results: micom.workflows.GrowthResults, taxon: str, filename: str = 'focal_interactions_%s.html' % datetime.now().strftime('%Y%m%d'), kind: str = 'mass') -> None

   Plot metabolic interactions between a focal taxa and all other taxa.

   This will visualize metabolic interaction between a taxon of interest (focal taxon)
   and all other taxa across all samples.

   :param results: The results returned by the `grow` workflow.
   :type results: micom.workflows.GrowthResults
   :param taxon: The focal taxon to use as a reference. Must be one of the taxa appearing
                 in `results.growth_rates.taxon`.
   :type taxon: str
   :param filename: The HTML file where the visualization will be saved.
   :type filename: str
   :param kind: Which kind of flux to use. Either
                - "flux": molar flux of a metabolite
                - "mass" (default): the mass flux (flux normalized by molecular weight)
                - "C": carbon flux
                - "N": nitrogen flux
   :type kind: str

   :returns: A MICOM visualization. Can be served with `viz.serve`.
   :rtype: Visualization


.. py:function:: plot_mes(results: micom.workflows.GrowthResults, filename: str = 'mes_%s.html' % datetime.now().strftime('%Y%m%d'), groups: pandas.Series = None, prevalence: float = 0.5) -> None

   Plot metabolic interactions between a focal taxa and all other taxa.

       This will plot the metabolic exchange score across samples and metabolites.
       The metabolic exchange score (MES) is defined as the geometric mean of the
       number of producers and consumers for a given metabolite in a sample.

       $$
       MES = 2\cdot
   rac{|p||c|}{|p| + |c|}
       $$

       Parameters
       ----------
       results : micom.workflows.GrowthResults
           The results returned by the `grow` workflow.
       filename : str
           The HTML file where the visualization will be saved.
       groups : pandas.Series
           Additional metadata to stratify MES score. The index must correspond to the
           `sample_id` in the results and values must be categorical. The `.name` attribute
           will be used to name the groups.
       prevalence : float in [0, 1]
           In what proportion of samples the metabolite has to have a non-zero MES to
           be shown on the plots. Can be used to show only very commonly exchanged
           metabolites.

       Notes
       -----
       The CSV files will always include all MES scores independent of the prevalence
       filter which is only used for visualization.

       Returns
       -------
       Visualization
           A MICOM visualization. Can be served with `viz.serve`.



