:mod:`micom.viz.prediction`
===========================

.. py:module:: micom.viz.prediction

.. autoapi-nested-parse::

   Visualization for phenotype prediction.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   micom.viz.prediction.plot_fit


.. function:: plot_fit(results, phenotype, variable_type='binary', variable_name='phenotype', filename='fit_%s.html' % datetime.now().strftime('%Y%m%d'), flux_type='production', min_coef=0.001, atol=1e-06)

   Test for differential metabolite production.

   This will fit the `phenotype` response using L1-regularized linear models
   with log-fluxes as features. Will use LASSO regression for a continuous
   response and L1-regularized Logistic regression for a binary response.

   :param results: The results returned by the `grow` workflow.
   :type results: micom.workflows.GrowthResults
   :param phenotype: The data to be fitted. Its index must correspond to `sample_id` in
                     `exchanges`.
   :type phenotype: pandas.Series
   :param variable_type: The type of the variable.
   :type variable_type: str of ["binary", "continuous"]
   :param variable_name: A short description of the phenotype for instance "disease_status".
   :type variable_name: str
   :param filename: The HTML file where the visualization will be saved.
   :type filename: str
   :param flux_type: Whether to fit using import or production fluxes.
   :type flux_type: str of ["import", "production"]
   :param min_coef: Only report coefficient that are at least that large.
   :type min_coef: float in [0.0, Inf]
   :param atol: Tolerance to consider a flux different from zero. Should be roughly equivalent
                to the solver tolerance.
   :type atol: float

   :returns: A MICOM visualization. Can be served with `viz.view`.
   :rtype: Visualization


