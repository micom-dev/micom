micom.workflows.tradeoff
========================

.. py:module:: micom.workflows.tradeoff

.. autoapi-nested-parse::

   Workflow to run cooperative tradeoff with various tradeoff values.



Attributes
----------

.. autoapisummary::

   micom.workflows.tradeoff.logger


Functions
---------

.. autoapisummary::

   micom.workflows.tradeoff.load_pickle
   micom.workflows.tradeoff.workflow
   micom.workflows.tradeoff.process_medium
   micom.workflows.tradeoff._tradeoff
   micom.workflows.tradeoff.tradeoff


Module Contents
---------------

.. py:function:: load_pickle(filename)

   Load a community model from a pickled version.

   :param filename: The file the community is stored in.
   :type filename: str

   :returns: The loaded community model.
   :rtype: micom.Community


.. py:data:: logger

.. py:function:: workflow(func, args, threads=4, description=None, progress=True)

   Run analyses for several samples in parallel.

   This will analyze several samples in parallel. Includes a workaround for
   optlang memory leak.

   :param func: A function that takes a single argument (can be any object) and
                that performs your analysis for a single sample.
   :type func: function
   :param args: An array-like object (list, tuple, numpy array, pandas Series, etc.)
                that contains the arguments for each sample.
   :type args: array-like object
   :param threads: How many samples to analyze in parallel at once.
   :type threads: positive int
   :param description: The dewscription shown in front of the progress bar.
   :type description: str
   :param progress: Whether to show a progress bar.
   :type progress: bool


.. py:function:: process_medium(medium, samples)

   Prepare a medium for simulation.


.. py:function:: _tradeoff(args)

.. py:function:: tradeoff(manifest, model_folder, medium, tradeoffs=np.arange(0.1, 1.0 + 1e-06, 0.1), threads=1, atol=None, rtol=None, presolve=False)

   Run growth rate predictions for varying tradeoff values.

   :param manifest: The manifest as returned by the `build` workflow.
   :type manifest: pandas.DataFrame
   :param model_folder: The folder in which to find the files mentioned in the manifest.
   :type model_folder: str
   :param medium: A growth medium. Must have columns "reaction" and "flux" denoting
                  exchnage reactions and their respective maximum flux.
   :type medium: pandas.DataFrame
   :param tradeoffs: An array of tradeoff vaues to be tested. One simulation without
                     a tradeoff (no cooperative tradeoff) will always be run additionally
                     and will have a tradeoff of "NaN".
   :type tradeoffs: array of floats in (0.0, 1.0]
   :param threads: The number of parallel workers to use when building models. As a
                   rule of thumb you will need around 1GB of RAM for each thread.
   :type threads: int >=1
   :param atol: Absolute tolerance for the growth rates. If None will use the solver tolerance.
   :type atol: float
   :param rtol: Relative tolerqance for the growth rates. If None will use the solver tolerance.
   :type rtol: float
   :param presolve: Whether to use the presolver/scaling. Can improve numerical accuracy in some
                    cases.
   :type presolve: bool

   :returns: The predicted growth rates.
   :rtype: pandas.DataFrame


