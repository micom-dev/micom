{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Installing MICOM\n",
    "\n",
    "MICOM is present on PyPi (the Python Package Index), so it can be installed via pip with"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```bash\n",
    "pip install micom\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The same installation strategy also works with Anaconda installations or any other Python distributions. Supported Python versions are 3.7 or any later.\n",
    "\n",
    "By default MICOM will also install [OSQP](https://osqp.org) as a quadratic programming solver. MICOM employs a bunch of tricks\n",
    "to improve OSQP performance for linear programming problems, but will still only each accuracies in the order of 1e-4. \n",
    "You may install a commercial QP solver to improve the accuracy and speed (all of them offer free academic licenses). \n",
    "\n",
    "If you have several supported solvers installed you may later specify one with the `solver` argument in `micom.Community` or\n",
    "`micom.workflows.build`.\n",
    "\n",
    "\n",
    "## (Optional) Install another QP solver\n",
    "\n",
    "**CPLEX (recommended)**\n",
    "\n",
    "After registering and downloading the CPLEX studio for your OS unpack it (by running the provided installer) to a directory of your choice (we will assume it's called `ibm`).\n",
    "\n",
    "Now install the CPLEX python package into your activated environment:\n",
    "\n",
    "```bash\n",
    "pip install ibm/cplex/python/3.8/x86-64_linux\n",
    "```\n",
    "\n",
    "Substitute `3.8` with your Python version. Substitute `x86-64_linux` with the folder corresponding to your system (there will only be one subfolder in that directory).\n",
    "\n",
    "**Gurobi (works, but not recommended)**\n",
    "\n",
    "MICOM is not continuously tested against Gurobi. Consequently Gurobi support is often iffy and might break for periods of time. It will also be *much* slower than CPLEX or OSQP. Gurobi is\n",
    "fast in solving the problem but the Gurobi Python interface is very slow in returning the optimal values for all model variables. \n",
    "\n",
    "You should only consider using Gurobi if:\n",
    "1. You do not have access to CPLEX\n",
    "2. You do need high accuracy solutions (tolerance of 1e-6 or lower)\n",
    "\n",
    "Gurobi can be installed with conda.\n",
    "\n",
    "```bash\n",
    "conda install -c gurobi gurobi\n",
    "```\n",
    "\n",
    "You will now have to register the installation using your license key.\n",
    "\n",
    "```bash\n",
    "grbgetkey YOUR-LICENSE-KEY\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}